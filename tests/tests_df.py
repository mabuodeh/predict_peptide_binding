import unittest
import pandas as pd
from pandas.util.testing import assert_frame_equal


# from predict_peptide_binding.binding import read_string_file
from predict_peptide_binding.df import to_df


class DataFrameTests(unittest.TestCase):

    def test_to_df(self):
        binding_prediction = [
            ['SCORE', '65.62', 'PVALUE', '0.01766', 'L', '8', 'N', '4', '-----------', 'pro-2::147', 'ala-3::1',
             '-----------', '-----------', '-----------', 'gly-7::77', 'ala-8::6'],
            ['SCORE', '64.84', 'PVALUE', '0.02011', 'L', '8', 'N', '3', '-----------', '-----------', 'ala-3::8',
             '-----------', 'pro-5::141', 'pro-6::145', '-----------', '-----------'],
            ['SCORE', '64.84', 'PVALUE', '0.02011', 'L', '8', 'N', '3', '-----------', '-----------', '-----------',
             '-----------', 'pro-5::145', 'pro-6::141', '-----------', 'ala-8::8'],
            ['SCORE', '64.21', 'PVALUE', '0.02233', 'L', '8', 'N', '4', '-----------', 'pro-2::146', 'ala-3::5',
             '-----------', '-----------', '-----------', 'gly-7::72', 'ala-8::7'],
            ['SCORE', '61.74', 'PVALUE', '0.03359', 'L', '8', 'N', '3', '-----------', '-----------', 'ala-3::8',
             '-----------', 'pro-5::144', 'pro-6::143', '-----------', '-----------'],
            ['SCORE', '61.74', 'PVALUE', '0.03359', 'L', '8', 'N', '3', '-----------', '-----------', '-----------',
             '-----------', 'pro-5::143', 'pro-6::144', '-----------', 'ala-8::8'],
            ['SCORE', '59.72', 'PVALUE', '0.04668', 'L', '8', 'N', '3', 'gly-1::74', 'pro-2::142', 'ala-3::3',
             '-----------', '-----------', '-----------', '-----------', '-----------'],
            ['SCORE', '57.53', 'PVALUE', '0.06629', 'L', '8', 'N', '3', '-----------', '-----------', 'ala-3::8',
             '-----------', 'pro-5::144', 'pro-6::145', '-----------', '-----------'],
            ['SCORE', '57.53', 'PVALUE', '0.06629', 'L', '8', 'N', '3', '-----------', '-----------', '-----------',
             '-----------', 'pro-5::145', 'pro-6::144', '-----------', 'ala-8::8'],
            ['SCORE', '57.10', 'PVALUE', '0.07094', 'L', '8', 'N', '3', 'gly-1::74', 'pro-2::142', 'ala-3::7',
             '-----------', '-----------', '-----------', '-----------', '-----------']]
        # d = {'col1': [1, 2], 'col2': [3, 4]}
        # df = pd.DataFrame(data=d)
        # ['Score', 'p-value', 'L', 'N']
        expected = pd.DataFrame(
            {'Score': ['65.62', '64.84', '64.84', '64.21', '61.74', '61.74', '59.72', '57.53', '57.53', '57.10'],
              'p-value': ['0.01766', '0.02011', '0.02011', '0.02233', '0.03359', '0.03359', '0.04668', '0.06629',
                          '0.06629', '0.07094'],
              'L': ['8', '8', '8', '8', '8', '8', '8', '8', '8', '8'],
              'N': ['4', '3', '3', '4', '3', '3', '3', '3', '3', '3'],
              'residue 1': ['-----------', '-----------', '-----------', '-----------', '-----------', '-----------',
                            'gly-1::74', '-----------', '-----------', 'gly-1::74'],
              'residue 2': ['pro-2::147', '-----------', '-----------', 'pro-2::146', '-----------', '-----------',
                            'pro-2::142', '-----------', '-----------', 'pro-2::142'],
              'residue 3': ['ala-3::1', 'ala-3::8', '-----------', 'ala-3::5', 'ala-3::8', '-----------', 'ala-3::3',
                            'ala-3::8', '-----------', 'ala-3::7'],
              'residue 4': ['-----------', '-----------', '-----------', '-----------', '-----------', '-----------',
                            '-----------', '-----------', '-----------', '-----------'],
              'residue 5': ['-----------', 'pro-5::141', 'pro-5::145', '-----------', 'pro-5::144', 'pro-5::143',
                            '-----------', 'pro-5::144', 'pro-5::145', '-----------'],
              'residue 6': ['-----------', 'pro-6::145', 'pro-6::141', '-----------', 'pro-6::143', 'pro-6::144',
                            '-----------', 'pro-6::145', 'pro-6::144', '-----------'],
              'residue 7': ['gly-7::77', '-----------', '-----------', 'gly-7::72', '-----------', '-----------',
                            '-----------', '-----------', '-----------', '-----------'],
              'residue 8': ['ala-8::6', '-----------', 'ala-8::8', 'ala-8::7', '-----------', 'ala-8::8',
                            '-----------', '-----------', 'ala-8::8', '-----------']})

        actual = to_df(binding_prediction, 10)
        self.assertEqual(actual.equals(expected), True)

        actual = to_df(binding_prediction, 3)
        self.assertEqual(actual.equals(expected[:3]), True)
